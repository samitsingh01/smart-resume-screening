version: '3.8'

services:
  # Database Layer
  postgres:
    image: postgres:15-alpine
    container_name: resume_postgres
    environment:
      POSTGRES_DB: resume_screening
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: secure_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - resume_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d resume_screening"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"

  # Cache Layer
  redis:
    image: redis:7-alpine
    container_name: resume_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - resume_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.25"
        reservations:
          memory: 256M
          cpus: "0.1"

  # Backend Service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.enhanced
    container_name: resume_backend
    environment:
      - DATABASE_URL=postgresql://app_user:secure_password@postgres:5432/resume_screening
      - REDIS_URL=redis://redis:6379
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - CHROMA_DB_PATH=/app/data/chroma_db
      - LOG_LEVEL=INFO
      - DEBUG=false
      - WORKERS=1
      - MAX_FILE_SIZE=10485760
      - CHUNK_SIZE=800
      - CHUNK_OVERLAP=150
      - EMBEDDING_BATCH_SIZE=3
      - CACHE_TTL=1800
    volumes:
      - chroma_data:/app/data
      - file_storage:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - resume_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "1.0"
        reservations:
          memory: 2G
          cpus: "0.5"
    restart: unless-stopped

  # Frontend Service
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.enhanced
    container_name: resume_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_VERSION=2.0.0
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - resume_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.25"
        reservations:
          memory: 256M
          cpus: "0.1"
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  file_storage:
    driver: local

networks:
  resume_network:
    driver: bridge

